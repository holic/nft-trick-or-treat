/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TrickOrTreatInterface extends ethers.utils.Interface {
  functions: {
    "bagContents((address,uint256))": FunctionFragment;
    "dailyVisits(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeVisits(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "ringDoorbell((address,uint256),(address,uint256))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treats(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bagContents",
    values: [{ contractAddress: string; tokenId: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyVisits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeVisits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ringDoorbell",
    values: [
      { contractAddress: string; tokenId: BigNumberish },
      { contractAddress: string; tokenId: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treats",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "bagContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyVisits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeVisits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ringDoorbell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treats", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Treated(address,uint256,uint16)": EventFragment;
    "Tricked(address,uint256,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Treated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Tricked"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TreatedEvent = TypedEvent<
  [string, BigNumber, number] & {
    visitorContractAddress: string;
    visitorTokenId: BigNumber;
    amount: number;
  }
>;

export type TrickedEvent = TypedEvent<
  [string, BigNumber, number] & {
    visitorContractAddress: string;
    visitorTokenId: BigNumber;
    amount: number;
  }
>;

export class TrickOrTreat extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrickOrTreatInterface;

  functions: {
    bagContents(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[number]>;

    dailyVisits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeVisits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ringDoorbell(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      place: { contractAddress: string; tokenId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treats(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;
  };

  bagContents(
    visitor: { contractAddress: string; tokenId: BigNumberish },
    overrides?: CallOverrides
  ): Promise<number>;

  dailyVisits(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeVisits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ringDoorbell(
    visitor: { contractAddress: string; tokenId: BigNumberish },
    place: { contractAddress: string; tokenId: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treats(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    bagContents(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<number>;

    dailyVisits(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeVisits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    ringDoorbell(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      place: { contractAddress: string; tokenId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treats(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Treated(address,uint256,uint16)"(
      visitorContractAddress?: string | null,
      visitorTokenId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      {
        visitorContractAddress: string;
        visitorTokenId: BigNumber;
        amount: number;
      }
    >;

    Treated(
      visitorContractAddress?: string | null,
      visitorTokenId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      {
        visitorContractAddress: string;
        visitorTokenId: BigNumber;
        amount: number;
      }
    >;

    "Tricked(address,uint256,uint16)"(
      visitorContractAddress?: string | null,
      visitorTokenId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      {
        visitorContractAddress: string;
        visitorTokenId: BigNumber;
        amount: number;
      }
    >;

    Tricked(
      visitorContractAddress?: string | null,
      visitorTokenId?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      {
        visitorContractAddress: string;
        visitorTokenId: BigNumber;
        amount: number;
      }
    >;
  };

  estimateGas: {
    bagContents(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyVisits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeVisits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ringDoorbell(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      place: { contractAddress: string; tokenId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treats(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bagContents(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyVisits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeVisits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ringDoorbell(
      visitor: { contractAddress: string; tokenId: BigNumberish },
      place: { contractAddress: string; tokenId: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treats(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
